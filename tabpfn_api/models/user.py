import datetime
from sqlalchemy import Column, Integer, String, DateTime, LargeBinary, Index
from sqlalchemy.orm import relationship # Import relationship
from tabpfn_api.db.database import Base

class User(Base):
    """
    Database model for storing user information.

    Stores the mapping between our service API key and the user's encrypted TabPFN token.
    """
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)

    # Store the HASH of the API key generated by *our* service
    # Hashing is done using passlib (e.g., bcrypt)
    hashed_api_key = Column(String, unique=True, index=True, nullable=False)

    # Store the user's TabPFN token, encrypted using cryptography.fernet
    # Fernet produces bytes, hence LargeBinary
    encrypted_tabpfn_token = Column(LargeBinary, nullable=False)

    # Timestamp for when the user record was created
    created_at = Column(DateTime, default=datetime.datetime.utcnow, nullable=False)

    # Define the one-to-many relationship to ModelMetadata
    # 'back_populates' links this to the 'user' attribute in ModelMetadata
    # 'cascade="all, delete-orphan"' ensures associated models are deleted if the user is deleted.
    models = relationship(
        "ModelMetadata",
        back_populates="user",
        cascade="all, delete-orphan",
        passive_deletes=True # Needed for ON DELETE CASCADE at DB level
    )

# Redundant index definition removed - SQLAlchemy creates index for unique=True columns automatically with create_all
# Index("ix_users_hashed_api_key", User.hashed_api_key, unique=True) 